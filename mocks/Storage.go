// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	io "io"

	download "github.com/MarcoTomasRodriguez/hget/internal/download"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// DeleteDownload provides a mock function with given fields: id
func (_m *Storage) DeleteDownload(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteSegment provides a mock function with given fields: id
func (_m *Storage) DeleteSegment(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetSegmentSize provides a mock function with given fields: id
func (_m *Storage) GetSegmentSize(id string) (int64, error) {
	ret := _m.Called(id)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDownloads provides a mock function with given fields:
func (_m *Storage) ListDownloads() ([]download.Download, error) {
	ret := _m.Called()

	var r0 []download.Download
	if rf, ok := ret.Get(0).(func() []download.Download); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]download.Download)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenDownloadOutput provides a mock function with given fields: id
func (_m *Storage) OpenDownloadOutput(id string) (io.ReadWriteCloser, error) {
	ret := _m.Called(id)

	var r0 io.ReadWriteCloser
	if rf, ok := ret.Get(0).(func(string) io.ReadWriteCloser); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadWriteCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenSegment provides a mock function with given fields: id
func (_m *Storage) OpenSegment(id string) (io.ReadWriteCloser, error) {
	ret := _m.Called(id)

	var r0 io.ReadWriteCloser
	if rf, ok := ret.Get(0).(func(string) io.ReadWriteCloser); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadWriteCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadDownloadSpec provides a mock function with given fields: id
func (_m *Storage) ReadDownloadSpec(id string) (download.Download, error) {
	ret := _m.Called(id)

	var r0 download.Download
	if rf, ok := ret.Get(0).(func(string) download.Download); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(download.Download)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteDownloadSpec provides a mock function with given fields: _a0
func (_m *Storage) WriteDownloadSpec(_a0 download.Download) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(download.Download) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
